Def Drop as (Let X);
Def Twin as (Let X ; X X);
Def Triplet as (Twin ; Twin);
Def Swap as (Let X ; Let Y ; Y X);

Print If == 2 Drop 3 2
  "PASS: Drop"
else
  "FAIL: Drop";

Print If == 6 Drop Swap 6 5
  "PASS: Swap"
else
  "FAIL: Swap";

Print If == 4 Drop Twin 4
  "PASS: Twin"
else
  "FAIL: Twin";

Print If == 7 Drop Drop Triplet 7
  "PASS: Triplet"
else
  "FAIL: Triplet";

Print If == 2 Do (Drop) 3 2
  "PASS: Drop (runtime stack)"
else
  "FAIL: Drop (runtime stack)";

Print If == 6 Drop Do (Swap) 6 5
  "PASS: Swap (runtime stack)"
else
  "FAIL: Swap (runtime stack)";

Print If == 4 Drop Do (Twin) 4
  "PASS: Twin (runtime stack)"
else
  "FAIL: Twin (runtime stack)";

Print If == 7 Drop Drop Do (Triplet) 7
  "PASS: Triplet (runtime stack)"
else
  "FAIL: Triplet (runtime stack)";

Let X be == List (1 2 3) Stack 1 2 3;
Drop Drop Drop;

Print If X
  "PASS: Stack as list"
else
  "FAIL: Stack as list";

1 2 3 4 5;

Let Y be == List() Stack Clear;

Print If Y
  "PASS: Clearing the stack"
else
  "FAIL: Clearing the stack";
